<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans" xmlns:task="http://www.springframework.org/schema/task" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation=" http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven/>

    <!-- Allows for mapping the DispatcherServlet to "/" by forwarding static resource requests to the container's default Servlet -->
    <!--<mvc:default-servlet-handler />-->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/pages/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>


    <!-- This bean resolves specific types of exceptions to corresponding logical
        - view names for error views. The default behaviour of DispatcherServlet
        - is to propagate all exceptions to the servlet container: this will happen
        - here with all other types of exceptions. -->
    <!-- customer exception resolver -->
    <beans:bean class="com.pairwinter.snow.web.resolver.SnowHandlerExceptionResolver">
        <beans:property name="exceptionMappings">
            <beans:props>
                <beans:prop key=".BaseException">businessError</beans:prop>
                <beans:prop key=".HttpRequestMethodNotSupportedException">error404</beans:prop>
                <beans:prop key=".DataAccessException">error401</beans:prop>
                <beans:prop key=".AccessDeniedException">error401</beans:prop>
                <beans:prop key=".NoSuchRequestHandlingMethodException">error404</beans:prop>
                <beans:prop key=".TypeMismatchException">error404</beans:prop>
                <beans:prop key=".MissingServletRequestParameterException">error404</beans:prop>
                <beans:prop key=".ResourceNotFoundException">error404</beans:prop>
            </beans:props>
        </beans:property>
        <beans:property name="defaultStatusCode" value="500"></beans:property>
        <beans:property name="statusCodes">
            <beans:props>
                <beans:prop key="error401">401</beans:prop>
                <beans:prop key="error404">404</beans:prop>
                <beans:prop key="error500">500</beans:prop>
                <beans:prop key="businessError">500</beans:prop>
            </beans:props>
        </beans:property>
    </beans:bean>

	<!-- Only needed because we require fileupload in the org.springframework.samples.mvc.fileupload package -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

	<!-- Imports user-defined @Controller beans that process client requests -->
	<beans:import resource="controllers.xml" />

	<task:annotation-driven />
	
</beans:beans>
