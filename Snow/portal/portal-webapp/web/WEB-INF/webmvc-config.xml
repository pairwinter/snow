<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- The controllers are autodetected POJOs labeled with the @Controller annotation. -->
	<context:component-scan base-package="com.pairwinter.snow.web.**" use-default-filters="false">
		<context:include-filter expression="org.springframework.stereotype.Controller" type="annotation" />
	</context:component-scan>

    <!-- Turns on support for mapping requests to Spring MVC @Controller methods Also registers default Formatters and Validators for use across all @Controllers -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <bean class="org.springframework.http.MediaType">
                            <constructor-arg value="text"/>
                            <constructor-arg value="plain"/>
                            <constructor-arg value="UTF-8"/>
                        </bean>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources -->
    <mvc:resources location="resources/" mapping="/static/**" cache-period="31556926"/>
	<!-- Allows for mapping the DispatcherServlet to "/" by forwarding static resource requests to the container's default Servlet -->
	<mvc:default-servlet-handler />
	<!-- Register "global" interceptor beans to apply to all registered HandlerMappings -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor" />
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="lang" />
        <!--<bean class="com.everbridge.platform.portal.mobile.web.AccessInterceptor" />-->
        <!--<bean class="com.everbridge.platform.portal.interceptor.FilterPropertyBuilderInterceptor"/>-->
	</mvc:interceptors>

	<!-- Selects a static view for rendering without the need for an explicit controller -->
 	<mvc:view-controller path="/" view-name="index" />
	<!--<mvc:view-controller path="/login" />-->

	<!-- Resolves localized messages*.properties and application.properties
		files in the application to allow for internationalization. The messages*.properties
		files translate Roo generated messages which are part of the admin interface,
		the application.properties resource bundle localizes all application specific
		messages such as entity names and menu items. -->
<!--	<bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource" id="messageSource" p:basenames="classpath:i18n/messages" p:fallbackToSystemLocale="false" />-->
    <!--<bean class="com.pw.spring.handler.extension.MessageResourceExtesion" id="messageSource" p:basenames="classpath:i18n/messages" p:fallbackToSystemLocale="false" >-->
        <!--<property name="jsFilePath"  value="resources/javascripts/everbridge/i18n/i18n_message"/>-->
        <!--<property name="isCreatedJsMessage" value="false"/>-->
        <!--<property name="jsMessagePath" value="/statics/javascripts/everbridge/i18n/i18n_message"/>-->
    <!--</bean>-->
	<!--<bean class="com.pw.common.I18NMessageUtil" >-->
		<!--<property name="messageSource" ref="messageSource"/>-->
	<!--</bean>-->

	<!-- Store preferred language configuration in a cookie -->
	<bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver" id="localeResolver" p:cookieName="locale" p:cookieMaxAge="31536000" />
	<!-- Resolves localized <theme_name>.properties files in the classpath to allow for theme support -->
	<bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource" />

	<!-- Store preferred theme configuration in a cookie -->
	<bean class="org.springframework.web.servlet.theme.CookieThemeResolver" id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard" />

	<!-- This bean resolves specific types of exceptions to corresponding logical
		- view names for error views. The default behaviour of DispatcherServlet
		- is to propagate all exceptions to the servlet container: this will happen
		- here with all other types of exceptions. -->
			<!-- customer exception resolver -->
 	<bean class="com.pairwinter.snow.web.exception.SnowHandlerExceptionResolver" p:defaultErrorView="error500"> <property name="exceptionMappings">
             <props>
                 <prop key=".BaseException">businessError</prop>
                 <prop key=".DataAccessException">error401</prop>
                 <prop key=".AccessDeniedException">error401</prop>
                 <prop key=".NoSuchRequestHandlingMethodException">error404</prop>
                 <prop key=".TypeMismatchException">error404</prop>
                 <prop key=".MissingServletRequestParameterException">error404</prop>
                 <prop key=".ResourceNotFoundException">error404</prop>
             </props>
         </property>
         <property name="defaultStatusCode" value="500"></property>
         <property name="statusCodes">
             <props>
                 <prop key="error401">401</prop>
                 <prop key="error404">404</prop>
                 <prop key="error500">500</prop>
                 <prop key="businessError">500</prop>
             </props>
         </property>
 	</bean>

    <!-- Enable this for integration of file upload functionality -->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver" />
	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" id="tilesViewResolver"> <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" /></bean>
	<bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer" id="tilesConfigurer">
        <property name="tilesProperties">
            <props>
                <prop key="org.apache.tiles.evaluator.AttributeEvaluator">
                    org.apache.tiles.el.ELAttributeEvaluator
                </prop>
            </props>
        </property>
		<property name="definitions">
			<list>
				<value>/WEB-INF/pages/common/layouts.xml</value>
                <!-- Scan views directory for Tiles configurations -->
				<value>WEB-INF/**/*views.xml</value>
			</list>
		</property>
	</bean>
</beans>
